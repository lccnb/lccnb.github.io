<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ROS（2）</title>
      <link href="/2023/01/08/ROS%EF%BC%882%EF%BC%89/"/>
      <url>/2023/01/08/ROS%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="ROS通讯实例-VsCode配置ROS开发环境"><a href="#ROS通讯实例-VsCode配置ROS开发环境" class="headerlink" title="ROS通讯实例+VsCode配置ROS开发环境"></a>ROS通讯实例+VsCode配置ROS开发环境</h4><h4 id="1-话题通信-Publisher-Subscriber"><a href="#1-话题通信-Publisher-Subscriber" class="headerlink" title="1.话题通信(Publisher+Subscriber)"></a>1.话题通信(Publisher+Subscriber)</h4><ul><li><h5 id="如何创建Publisher"><a href="#如何创建Publisher" class="headerlink" title="如何创建Publisher"></a>如何创建Publisher</h5>Publisher主要作用是针对指定话题发布特定数据类型的消息。首先创建一个节点（talker.cpp），在节点中创建一个Publisher并发布字符串“hello world”,该节点位于&#x2F;src&#x2F;talker.cpp。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//ros节点初始化</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;talker&quot;</span>);</span><br><span class="line">    <span class="comment">//创建节点句柄</span></span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line">    <span class="comment">//创建一个Publisher,发布名为chatter的话题，消息类型为std_msg::String</span></span><br><span class="line">    ros::Publisher chatter_pub=n.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;chatter&quot;</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置循环的频率10Hz</span></span><br><span class="line">    <span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化std_msgs::String类型的消息</span></span><br><span class="line">        std_msgs::String msg;</span><br><span class="line">        std::stringstream ss;</span><br><span class="line">        ss&lt;&lt;<span class="string">&quot;hello,world&quot;</span>&lt;&lt;count;</span><br><span class="line">        msg.data=ss.<span class="built_in">str</span>();</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">//发布消息</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;%s&quot;</span>,msg.data.<span class="built_in">c_str</span>());</span><br><span class="line">        chatter_pub.<span class="built_in">publish</span>(msg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环等待回调函数</span></span><br><span class="line">        ros：：<span class="built_in">spinOnce</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照循环频率延时</span></span><br><span class="line">        loop_rate.<span class="built_in">slepp</span>();</span><br><span class="line">        ++count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="如何创建Subscriber"><a href="#如何创建Subscriber" class="headerlink" title="如何创建Subscriber"></a>如何创建Subscriber</h5>接下来尝试创建一个Subscriber以订阅Publisher节点发布的“hello world”字符串，该节点同样位于&#x2F;src&#x2F;listener.cpp</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到订阅的消息后，会进入消息回调函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chatterCallback</span><span class="params">(<span class="type">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">// 将接收到的消息打印出来</span></span><br><span class="line">     <span class="built_in">ROS_INFO</span>(<span class="string">&quot;I heard: [%s]&quot;</span>, msg-&gt;data.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">// 初始化ROS节点</span></span><br><span class="line">     ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;listener&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 创建节点句柄</span></span><br><span class="line">     ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 创建一个Subscriber，订阅名为chatter的话题，注册回调函数chatterCallback</span></span><br><span class="line">     ros::Subscriber sub = n.<span class="built_in">subscribe</span>(<span class="string">&quot;chatter&quot;</span>, <span class="number">1000</span>, chatterCallback);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 循环等待回调函数</span></span><br><span class="line">     ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h5>打开Publisher和Subscriber所在的功能包下的CMakeLisis.txt文件，在尾部添加以下代码：</li></ul><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span> <span class="variable">$&#123;catkin_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(talker src/talker.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(talker <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(talker <span class="variable">$&#123;PROJECT_NAME&#125;</span>_generate_messages_cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(listener src/listener.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(listener <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(talker <span class="variable">$&#123;PROJECT_NAME&#125;</span>_generate_messages_cpp)</span><br></pre></td></tr></table></figure><ol><li><p>include_directories</p><p>用于设置头文件的相对路径。全局路径默认是功能包的所在目录，比如功能包的头文件一般会放到功能包根目录下的include文件夹中，所以此处需要添加该文件夹。</p></li><li><p>add_executable</p><p>用于设置需要编译的代码和生成的可执行文件。第一个参数为期望生成的可执行文件的名称，后边的参数为参与编译的源码文件（cpp），如果需要多个代码文件，则可在后面依次列出，中间使用空格进行分隔。</p></li><li><p>target_link_libraries</p><p>用于设置链接库。很多功能需要使用系统或者第三方的库函数，通过该选项可以配置执行文件链接的库文件，其第一个参数与add_executable相同，是可执行文件的名称，后面依次列出需要链接的库。此处编译的Publisher和Subscriber没有使用其他库，添加默认链接库即可。</p></li><li><p>add_dependencies</p><p>用于设置依赖。在很多应用中，我们需要定义语言无关的消息类型，消息类型会在编译过程中产生相应语言的代码，如果编译的可执行文件依赖这些动态生成的代码，则需要使用add_dependencies添加${PROJECT_NAME}_generate_messages_cpp配置，即该功能包动态产生的消息代码。该编译规则也可以添加其他需要依赖的功能包。</p></li></ol><p>编译完成后系统将会生成两个可执行文件：takler和listener,放置在～&#x2F;catkin_ws&#x2F;devel&#x2F;lib&#x2F;路径下。</p><ul><li><h5 id="运行Publisher和Subscriber"><a href="#运行Publisher和Subscriber" class="headerlink" title="运行Publisher和Subscriber"></a>运行Publisher和Subscriber</h5>1.确认添加环境变量</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">$ cd ~/catkin_ws</span><br><span class="line">$ source ./devel/setup.bas</span><br><span class="line"></span><br><span class="line"><span class="comment">//将环境变量的配置脚本添加到终端的配置文件中,一劳永逸</span></span><br><span class="line"></span><br><span class="line">$ echo <span class="string">&quot;source ~/catkin_ws/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure><p>        2.启动roscore(确保ros master启动)</p><p>        3.启动Publisher</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">$ rosrun learning_communication talker</span><br></pre></td></tr></table></figure><p>        4.启动Subscriber</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">$ rosrun learning_communication listener</span><br></pre></td></tr></table></figure><h5 id="成功启动后的日至信息："><a href="#成功启动后的日至信息：" class="headerlink" title="成功启动后的日至信息："></a>成功启动后的日至信息：</h5><h4 id="2-服务中的Server和-Client"><a href="#2-服务中的Server和-Client" class="headerlink" title="2.服务中的Server和 Client"></a>2.服务中的Server和 Client</h4><ul><li><p>例：server提供两个数求和的服务，client提高服务所需的数据。</p></li><li><p>第一步：自定义服务类型数据</p></li><li><p>第二步：创建Server和 Client</p></li></ul><h5 id="第一步：自定义服务类型数据"><a href="#第一步：自定义服务类型数据" class="headerlink" title="第一步：自定义服务类型数据"></a>第一步：自定义服务类型数据</h5><ul><li><p>数据存放在srv文件夹中，名为AddTwoInts.srv</p></li><li><p>根据服务的特点，文件当中包含请求和应答两个数据域，数据域中的<br>内容与话题消息的数据类型相同，只是在请求与应答的描述之间，需<br>要使用“—”进行分割。</p></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AddTwoInts.srv</span></span><br><span class="line">int64 a</span><br><span class="line">int64 b</span><br><span class="line">---</span><br><span class="line">int64 sum</span><br></pre></td></tr></table></figure><h5 id="第二步：创建Server和-Client"><a href="#第二步：创建Server和-Client" class="headerlink" title="第二步：创建Server和 Client"></a>第二步：创建Server和 Client</h5><ul><li><h6 id="创建Server（server提供两个数求和的功能，并返回结果）"><a href="#创建Server（server提供两个数求和的功能，并返回结果）" class="headerlink" title="创建Server（server提供两个数求和的功能，并返回结果）"></a>创建Server（server提供两个数求和的功能，并返回结果）</h6></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;learning_communication/AddTwoInts.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// service回调函数，输入参数req，输出参数res</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">add</span><span class="params">(learning_communication::AddTwoInts::Request &amp;req,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"> learning_communication::AddTwoInts::Response &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">// 将输入参数中的请求数据相加，结果放到应答变量中</span></span><br><span class="line">     res.sum = req.a + req.b;</span><br><span class="line">     <span class="built_in">ROS_INFO</span>(<span class="string">&quot;request: x=%ld, y=%ld&quot;</span>, (<span class="type">long</span> <span class="type">int</span>)req.a, (<span class="type">long</span> <span class="type">int</span>)req.b);</span><br><span class="line">     <span class="built_in">ROS_INFO</span>(<span class="string">&quot;sending back response: [%ld]&quot;</span>, (<span class="type">long</span> <span class="type">int</span>)res.sum);</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">// ROS节点初始化</span></span><br><span class="line">     ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;add_two_ints_server&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建节点句柄</span></span><br><span class="line">     ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建一个名为add_two_ints的server，注册回调函数add()</span></span><br><span class="line">     ros::ServiceServer service = n.<span class="built_in">advertiseService</span>(<span class="string">&quot;add_two_ints&quot;</span>, add);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 循环等待回调函数</span></span><br><span class="line">     <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Ready to add two ints.&quot;</span>);</span><br><span class="line"></span><br><span class="line">     ros::<span class="built_in">spin</span>();</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//流程</span></span><br><span class="line">·初始化ROS节点。</span><br><span class="line">·创建Server实例。</span><br><span class="line">·循环等待服务请求，进入回调函数。</span><br><span class="line">·在回调函数中完成服务功能的处理并反馈应答数据。</span><br></pre></td></tr></table></figure><ul><li><h6 id="创建Client-通过终端输入的两个加数发布服务请求，等待应答结果"><a href="#创建Client-通过终端输入的两个加数发布服务请求，等待应答结果" class="headerlink" title="创建Client (通过终端输入的两个加数发布服务请求，等待应答结果)"></a>创建Client (通过终端输入的两个加数发布服务请求，等待应答结果)</h6></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;learning_communication/AddTwoInts.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">// ROS节点初始化</span></span><br><span class="line">     ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;add_two_ints_client&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 从终端命令行获取两个加数</span></span><br><span class="line">     <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">ROS_INFO</span>(<span class="string">&quot;usage: add_two_ints_client X Y&quot;</span>);</span><br><span class="line">             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建节点句柄</span></span><br><span class="line">     ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建一个client，请求add_two_int service</span></span><br><span class="line">     <span class="comment">// service消息类型是learning_communication::AddTwoInts</span></span><br><span class="line"></span><br><span class="line">     ros::ServiceClient client = n.<span class="built_in">serviceClient</span>&lt;learning_communication::AddTwoInts&gt; (<span class="string">&quot;add_two_ints&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建learning_communication::AddTwoInts类型的service消息</span></span><br><span class="line"></span><br><span class="line">    learning_communication::AddTwoInts srv;</span><br><span class="line">     srv.request.a = <span class="built_in">atoll</span>(argv[<span class="number">1</span>]);</span><br><span class="line">     srv.request.b = <span class="built_in">atoll</span>(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 发布service请求，等待加法运算的应答结果</span></span><br><span class="line">     <span class="keyword">if</span> (client.<span class="built_in">call</span>(srv))</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Sum: %ld&quot;</span>, (<span class="type">long</span> <span class="type">int</span>)srv.response.sum);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;Failed to call service add_two_ints&quot;</span>);</span><br><span class="line">             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//流程</span></span><br><span class="line">·初始化ROS节点。</span><br><span class="line">·创建一个Client实例。</span><br><span class="line">·发布服务请求数据。</span><br><span class="line">·等待Server处理之后的应答结果。</span><br></pre></td></tr></table></figure><ul><li><h6 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h6><p>1.编译参考上述Publisher和Subscriber</p><p>2.启动roscore,运行Server节点（功能包&#x2F;src&#x2F;Server.cpp），运行Client节点（功能包&#x2F;src&#x2F;client.cpp）</p></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">$ rosrun learning_communication server</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行client节点，并输入需要提供的参数</span></span><br><span class="line">$ rosrun learning_communication client <span class="number">3</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="VsCode配置ROS开发环境"><a href="#VsCode配置ROS开发环境" class="headerlink" title="VsCode配置ROS开发环境"></a>VsCode配置ROS开发环境</h4><ul><li><h6 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h6></li></ul><ol><li><p>C&#x2F;C++</p></li><li><p>ROS</p></li><li><p>catkin_tool</p></li><li><p>CMAKE</p></li></ol><ul><li><h6 id="在vscode中打开工作空间"><a href="#在vscode中打开工作空间" class="headerlink" title="在vscode中打开工作空间"></a>在vscode中打开工作空间</h6></li></ul><ol><li><p>找到目录中的src文件夹，右键选中，选择create catkin package（若没有此选择，则少安装了ROS插件），创建功能包名为hello_ros，继续添加依赖roscpp和rospy。</p></li><li><p>完成后，在src&#x2F;hello_ros&#x2F;src中添加一个节点文件，命名为helloRos.cpp。并添加以下代码：</p></li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印hello world!</span></span><br><span class="line"><span class="built_in">ROS_INFO</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    3.通常情况下会提示找不到”ros&#x2F;ros.h”此头文件，接下来修改## c_cpp_properties.json文件，按F1，找到C&#x2F;C++:编辑配置(JSON)，将其内容修改如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;browse&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;databaseFilename&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;limitSymbolsToIncludedHeaders&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            #以下路径很重要</span><br><span class="line">            <span class="string">&quot;includePath&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/opt/ros/melodic/include/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/usr/include/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ROS&quot;</span>,</span><br><span class="line">            <span class="string">&quot;defines&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;compilerPath&quot;</span>: <span class="string">&quot;/usr/bin/g++&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cStandard&quot;</span>: <span class="string">&quot;gnu17&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cppStandard&quot;</span>: <span class="string">&quot;c++17&quot;</span>,</span><br><span class="line">            <span class="string">&quot;intelliSenseMode&quot;</span>: <span class="string">&quot;linux-gcc-x64&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    4.配置launch.josn文件</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/devel/lib/hello_ros/helloROS&quot;</span>, <span class="comment">// 表示可执行程序所在的路径，此处按实际情况修改。其中，$&#123;workspaceRoot&#125;表示VScode加载的文件夹的根目录，</span></span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="string">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    5.配置tasks.json文件</p><p>按下 ctrl + shfit + p 输入指令<code>tasks: configure task</code>, 选择<code>catkin_make: build</code>，复制以下代码修改：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;label&quot;</span>: <span class="string">&quot;catkin_make&quot;</span>, <span class="comment">//代表提示的描述性信息</span></span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,  <span class="comment">//可以选择shell或者process,如果是shell代码是在shell里面运行一个命令，如果是process代表作为一个进程来运行</span></span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;catkin_make&quot;</span>,<span class="comment">//这个是我们需要运行的命令</span></span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;-DCMAKE_EXPORT_COMPILE_COMMANDS=1&quot;</span>],<span class="comment">//如果需要在命令后面加一些后缀，可以写在这里，比如-DCATKIN_WHITELIST_PACKAGES=“pac1;pac2”</span></span><br><span class="line">            <span class="string">&quot;group&quot;</span>: &#123;<span class="string">&quot;kind&quot;</span>:<span class="string">&quot;build&quot;</span>,<span class="string">&quot;isDefault&quot;</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            <span class="string">&quot;presentation&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;reveal&quot;</span>: <span class="string">&quot;always&quot;</span>,<span class="comment">//可选always或者silence，代表是否输出信息</span></span><br><span class="line">                <span class="string">&quot;panel&quot;</span>: <span class="string">&quot;new&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;problemMatcher&quot;</span>: <span class="string">&quot;$msCompile&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    6.修改CMakeLists.txt，加入编译项</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">catkin_package</span>(</span><br><span class="line">  CATKIN_DEPENDS</span><br><span class="line">)</span><br><span class="line"># 头文件路径</span><br><span class="line"><span class="built_in">include_directories</span>(</span><br><span class="line">include</span><br><span class="line">  $&#123;catkin_INCLUDE_DIRS&#125;</span><br><span class="line">)</span><br><span class="line"># 生成可执行文件</span><br><span class="line"><span class="built_in">add_executable</span>(helloROS src/helloROS.cpp) # 此处按实际情况修改</span><br><span class="line"># 链接库</span><br><span class="line"><span class="built_in">target_link_libraries</span>(helloROS $&#123;catkin_LIBRARIES&#125;) # 此处按实际情况修改</span><br></pre></td></tr></table></figure><p>    7.按<code>Ctrl+Shift+B</code>进行编译，可以看到与catkin_make一样的编译过程。 新开一个终端，运行<code>roscore</code>启动Master节点。 按F5运行编译生成的可执行文件。配置完成。</p><h5 id="在vscode终端中的快捷操作"><a href="#在vscode终端中的快捷操作" class="headerlink" title="在vscode终端中的快捷操作"></a>在vscode终端中的快捷操作</h5><ul><li>启动roscore</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ROS:start</span><br></pre></td></tr></table></figure><ul><li><p>编译</p><p>ctrl + shfit + b</p></li><li><p>运行节点</p></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ctrl + shfit + p</span><br><span class="line">ROS：Run a Ros executable</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2023/01/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2023/01/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2023/01/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/2.jpg" alt="dsa"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS(1)</title>
      <link href="/2023/01/01/ROS/"/>
      <url>/2023/01/01/ROS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ROS基础较为重要的点"><a href="#ROS基础较为重要的点" class="headerlink" title="ROS基础较为重要的点"></a>ROS基础较为重要的点</h3><h4 id="一、架构图"><a href="#一、架构图" class="headerlink" title="一、架构图"></a>一、架构图</h4><p><img src="1.png"></p><h3 id="二、节点、消息、话题、服务、ros-master"><a href="#二、节点、消息、话题、服务、ros-master" class="headerlink" title="二、节点、消息、话题、服务、ros master"></a>二、节点、消息、话题、服务、ros master</h3><p><img src="2.png"></p><p>    节点：执行运算任务的进程，通常就是一个代码文件</p><p>    消息：节点间的通信，消息是一种数据结构</p><p>    话题：一个节点可以向特定的话题发布消息或者接收来自某个话题的消息</p><p>    服务：不同于发布&#x2F;订阅模式，我们将同步双向通信模式称为服务，类似于web服务器。</p><p>    ROS MASTER:所以节点都要向它注册，由他来提供节点间的通信，查找，连接各种问题。</p><h3 id="三、文件系统"><a href="#三、文件系统" class="headerlink" title="三、文件系统"></a>三、文件系统</h3><p><img src="3.png"></p><h6 id="元功能包："><a href="#元功能包：" class="headerlink" title="元功能包："></a>元功能包：</h6><p>实现某一个功能的所有功能包的集合。例如：完成导航这个功能的功能包中含有建图、激光雷达、里程计、传感器等等功能包</p><h3 id="四、三种通信机制"><a href="#四、三种通信机制" class="headerlink" title="四、三种通信机制"></a>四、三种通信机制</h3><h6 id="4-1、话题通信机制"><a href="#4-1、话题通信机制" class="headerlink" title="4.1、话题通信机制"></a>4.1、话题通信机制</h6><p><img src="4.png"></p><p>    1) 发布者通过1234端口使用RPC协议向master发布注册信息，包含所发布消息的话题名。</p><p>    2） 订阅者也同样使用RPC协议向master发送注册信息，包含所要订阅的话题名。</p><p>    3） 信息匹配：ROS master会根据注册表中信息与接受者所要订阅的话题匹配，一旦找到，将通过RPC协议向订阅者发送发布者的RPC地址信息</p><p>    4） 订阅者收到发布者的地址后，将尝试通过RPC协议向发布者发送连接请求，包括传输订阅的话题名、消息类型、以及通信协议。</p><p>    5）发布者接收到连接请求后，任然通过RPC协议向订阅者确认连接请求，并发送自身的TCP地址信息。</p><p>    6） 订阅者收到确认信息后，使用TCP与发布者建立连接。</p><p>    7） 成功连接后，不在需要ROS naster， 发布者可以向订阅者发送消息。</p><p>    note：前5个步骤都需要使用到RPC协议，后两个步骤使用TCP协议。ROS master主要作用就是帮助节点间建立连接。但不参与最终的数据传输。</p><h6 id="4-2、-服务通信机制"><a href="#4-2、-服务通信机制" class="headerlink" title="4.2、 服务通信机制"></a>4.2、 服务通信机制</h6><p><img src="5.png"></p><p>   之前有提过：服务类似于web服务器的通信方式（应答）</p><p>    1） talker通过1234端口使用RPC协议向master发布注册信息，包含所提供的服务名。</p><p>    2） listener也同样使用RPC协议向master发送注册信息，包含所要查找的服务名。</p><p>    3） master根据listener的订阅信息在注册表中匹配，若找到，将通过RPC协议发送talker的TCP地址。</p><p>    4） listener接收到地址信息后，使用TCP与talker建立连接，并发送服务的请求数据。</p><p>    5） talker接收到服务请求和参数后，开始执行服务功能，完成后，向listener发送应答数据。</p><h4 id="话题通信和服务通信最大的区别："><a href="#话题通信和服务通信最大的区别：" class="headerlink" title="话题通信和服务通信最大的区别："></a>话题通信和服务通信最大的区别：</h4><p>    话题通信通常都是发布者发送，订阅者被动的接收；而listener想要自主获取数据该怎么办呢？服务通信就解决了这个问题，它向master注册了一个特定的服务，listener可以向talker发送请求（采用应答方式）</p><h6 id="4-3、参数管理机制"><a href="#4-3、参数管理机制" class="headerlink" title="4.3、参数管理机制"></a>4.3、参数管理机制</h6><p><img src="6.jpg"></p><p>    参数类似于ROS中的全局变量，有master管理，通信机制不涉及TCP、UDP通信。</p><p>    1） talker使用RPC向master发送参数设置数据，包含参数名和数值，master将其保存至参数列表中。</p><p>    2） listener也通过RPC向master发送参数查找请求，包含要查找的参数名。</p><p>    3） master根据listener欲查找的参数名在参数列表中匹配，找到后将参数数值发送给listener。（若talker将参数数值变动，listener无法知晓）</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
